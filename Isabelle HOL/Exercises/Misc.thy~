theory Misc
  imports Main "HOL-Library.Disjoint_Sets"
begin

fun sum :: "nat list \<Rightarrow> nat" where
"sum [] = 0"|
"sum (x # xs) = x + sum xs"

definition sumrep :: "nat \<Rightarrow> nat list \<Rightarrow> bool" where
"sumrep x xs \<equiv> sum xs = x"

definition filled_elts :: " nat set set \<Rightarrow> bool" where
"filled_elts X \<equiv> (\<forall> x \<in> X. card x = 1 + Max x - Min x)"

definition box_sum :: "nat \<Rightarrow> nat \<Rightarrow> nat set set set" where
"box_sum n s = {x \<in> Pow(Pow(lessThan (n::nat))). partition_on (lessThan (n::nat)) x \<and>
 filled_elts x \<and> card x = s}"

fun box_to_sumrep :: "nat set set \<Rightarrow> list" where
"box_to_sumrep"

value "partition_on {(1::nat),2,3} {{1,2},{3}}"
value "Pow (atMost (3::nat))"
value "card {(1::nat),2,3}"
value "card (box_sum 3 2)"
value "box_sum 3 2"

definition

lemma one: 
  assumes "n>0 \<and> k>0"
  shows "card (box_sum n k) = n-1 choose k-1"

(*
definition sum2rep :: "nat list \<Rightarrow> (nat \<Rightarrow> nat list \<Rightarrow> bool)" where
"sum2rep xs = sumrep ((sum xs) xs)"

definition srset :: "nat \<Rightarrow> set \<Rightarrow> bool" where
"srset x S \<equiv> 
*)